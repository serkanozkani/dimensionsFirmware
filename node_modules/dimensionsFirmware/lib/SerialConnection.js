/*	* SerialConnection.js
	*
	* This file is subject to the terms and conditions defined in
	* file 'LICENSE', which is part of this source code package.
	*
	* Authored by: Alexander Stokes
	* License: CC by-sa 4.0
	* Owner: Alexander Stokes LLC
	* Written: 2013-12-19
	*/

var SerialPort = require('serialport').SerialPort;

function SerialConnection () {
	this.serialPortInstance = null;
	this.baudRate = null;
	this.comName = null;
	this.connected = false;

	this.awaitingEmitReply = false;

	this.unprocessedIncomingData = '';

}

SerialConnection.prototype = Object.create(
	require('events').EventEmitter.prototype);


SerialConnection.prototype.setBaudRate = function (baudRate) {
	this.baudRate = baudRate;
}

SerialConnection.prototype.setComName = function (comName) {
	this.comName = comName;
}

SerialConnection.prototype.connect = function (Fn) {
	var self = this;

	this.serialPortInstance = new SerialPort(this.comName, {
		baudrate : 9600
	}, false);


	this.serialPortInstance.open(function (error) {
		
		if (error) {
			Fn (error);
			return;
		}

		self.serialPortInstance.on('data', function (data) {
			if (!self.connected) {
				self.connected = true;
				Fn(null);
				Fn = function () {};

			}

			self.unprocessedIncomingData += data;

			// start at 0, and look for the first newline.
			// Then, split the data there, and broadcast as data.
			var a = -1;
			var line = '';

			if (~(a = self.unprocessedIncomingData.indexOf('\r\n'))) {
				line = self.unprocessedIncomingData.substr(0, a);
				self.unprocessedIncomingData = self.unprocessedIncomingData.substr(a+2);
			} else if (~(a = self.unprocessedIncomingData.indexOf('\n'))) {
				line = self.unprocessedIncomingData.substr(0, a);
				self.unprocessedIncomingData = self.unprocessedIncomingData.substr(a+1);
			} else {
				return;
			}

			if (self.awaitingEmitReply) {
				self.awaitingEmitReply(line);
				return
			}
			self.emit('data', line);
		});
	});	
}

SerialConnection.prototype.send = function (action, args, Fn) {
	var self = this;

	for (var i = 0; i < args.length; i++) {
		var arg = args[i];
		switch (typeof arg) {
			case 'number':
				break;
			case 'boolean' :
				arg[i] = arg?1:0;	
			default:
				arg[i] = Number(arg);
		}
		arg[i] = Math.abs(arg[i]);
	};

	var command = [action, '(', args.join(','), ')\n'].join('');

	self.serialPortInstance.write(command, function (error) {
		if (error) {
			Fn (error);
			return;
		}
		Fn()
	});

}

module.exports = SerialConnection;
