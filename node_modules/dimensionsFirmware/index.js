/*	* dimensionsFirmware.js
	*
	* This file is subject to the terms and conditions defined in
	* file 'LICENSE', which is part of this source code package.
	*
	* Authored by: Alexander Stokes
	* License: CC by-sa 4.0
	* Owner: Alexander Stokes LLC
	* Written: 2013-12-15
	*/

var BAUD_RATE = 9600;

var SerialPort = require('serialport').SerialPort;
var SerialConnection = require('./lib/SerialConnection');
var findDevice = require('./lib/findDevice');

function DimensionsFirmware () {
	this.connection = null;
}

DimensionsFirmware.prototype = Object.create(require('events').EventEmitter.prototype);

DimensionsFirmware.prototype.setConnection = function (connection) {
	this.connection = connection;
	var t = this;

	this.connection.on('data', function (line) {
		t.emit('line', line);
	});
};

DimensionsFirmware.prototype.testEndstopX = function (Fn) {
	this.connection.send('printer.testEndstopX', [], Fn);
};

DimensionsFirmware.prototype.testMotors = function (Fn) {
	this.connection.send('printer.testMotors', [], Fn);
};

DimensionsFirmware.prototype.calibrateX = function (Fn) {
	this.connection.send('printer.calibrateX', [], Fn);
};

DimensionsFirmware.prototype.calibrateY = function (Fn) {
	this.connection.send('printer.calibrateY', [], Fn);
};
DimensionsFirmware.prototype.calibrateZ = function (Fn) {
	this.connection.send('printer.calibrateZ', [], Fn);
};

DimensionsFirmware.prototype.reset = function (Fn) {
	this.connection.send('printer.reset', [], Fn);
};

DimensionsFirmware.prototype.emergencyStop = function (Fn) {
	this.connection.send('printer.emergencyStop', [], Fn);
};

DimensionsFirmware.prototype.navigate = function (x, y, Fn) {
	this.connection.send('printer.navigate', [x, y], Fn);
};

DimensionsFirmware.prototype.help = function (Fn) {
	this.connection.send('help', [], Fn);
};

DimensionsFirmware.prototype.status = function (Fn) {
	this.connection.send('printer.status', [], Fn);
};

DimensionsFirmware.prototype.lockout = function (Fn) {
	this.connection.send('printer.lockout', [], Fn);
};

DimensionsFirmware.prototype.pollHeatbed = function (Fn) {
	this.connection.send('printer.pollHeatbed', [], Fn);
};

DimensionsFirmware.prototype.testHotend = function (Fn) {
	this.connection.send('printer.testHotend', [], Fn);
};

DimensionsFirmware.prototype.testHeatbed = function (Fn) {
	this.connection.send('printer.testHeatbed', [], Fn);
};

DimensionsFirmware.prototype.pollExtruder = function (Fn) {
	this.connection.send('printer.pollExtruder', [], Fn);
};



DimensionsFirmware.connect = function (comName, Fn) {
	// Returns a basic SerialConnection

	var BFC = new SerialConnection ();
	var dfi = new DimensionsFirmware ();


	BFC.setBaudRate(BAUD_RATE);

	function connectToCom (comName) {
		BFC.setComName(comName);
		BFC.connect(function (err) {
			if (err) {
				Fn (err);
				return;
			}
			Fn();
		});
	}

	if (!comName) {

		findDevice.listDevices(function (e, deviceListing) {


			findDevice.findBestMatch (deviceListing, function (e, bestMatch) {

				connectToCom(bestMatch.comName);
				
			})
		})
	} else {
		connectToCom(comName);
	}

	dfi.setConnection (BFC);

	return dfi;
}

exports.connect = DimensionsFirmware.connect;
